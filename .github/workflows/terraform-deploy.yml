name: "Infrastructure Deploy - Terraform"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform Action"
        required: true
        default: "plan"
        type: choice
        options:
          - "plan"
          - "apply"
          - "destroy"

      auto_approve:
        description: "Auto approve (skip manual approval for apply/destroy)"
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        type: string
      auto_approve:
        description: "Auto approve (skip manual approval for apply/destroy)"
        required: false
        type: boolean
        default: false
    secrets:
      AWS_ROLE_ARN:
        required: true
      DB_PASSWORD:
        required: true
    outputs:
      ec2_instance_id:
        description: "EC2 Instance ID"
        value: ${{ jobs.terraform.outputs.ec2_instance_id }}
      ec2_public_ip:
        description: "EC2 Public IP"
        value: ${{ jobs.terraform.outputs.ec2_public_ip }}
      rds_endpoint:
        description: "RDS Endpoint"
        value: ${{ jobs.terraform.outputs.rds_endpoint }}

permissions:
  id-token: write # Required for AWS OIDC
  contents: read

env:
  AWS_REGION: "us-east-1"
  TF_VAR_project_name: "sec-llm-infra"

jobs:
  terraform:
    name: "Terraform ${{ inputs.action }}"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform

    outputs:
      terraform_outputs: ${{ steps.terraform_outputs.outputs.terraform_outputs }}
      ec2_instance_id: ${{ steps.terraform_outputs.outputs.ec2_instance_id }}
      ec2_public_ip: ${{ steps.terraform_outputs.outputs.ec2_public_ip }}
      rds_endpoint: ${{ steps.terraform_outputs.outputs.rds_endpoint }}

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubInfraDeploy-Terraform
          aws-region: ${{ env.AWS_REGION }}

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: "Terraform Format Check"
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: "Terraform Init"
        id: init
        run: |
          terraform init

      - name: "Terraform Validate"
        id: validate
        run: terraform validate -no-color

      - name: "Terraform Plan"
        id: plan
        run: |
          echo "🔍 Creating Terraform execution plan..."

          if [ "${{ inputs.action }}" == "destroy" ]; then
            echo "⚠️ Planning DESTROY operation..."
            terraform plan -destroy -no-color -input=false \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="project_name=${{ env.TF_VAR_project_name }}" \
              -var="db_password=${{ secrets.DB_PASSWORD }}" \
              -out=tfplan
          else
            echo "📋 Planning infrastructure deployment..."
            terraform plan -no-color -input=false \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="project_name=${{ env.TF_VAR_project_name }}" \
              -var="db_password=${{ secrets.DB_PASSWORD }}" \
              -out=tfplan
          fi

          # Show plan summary
          echo "📊 Plan created successfully and saved to tfplan"
        continue-on-error: false

      - name: "Manual Approval for Apply/Destroy"
        if: |
          (inputs.action == 'apply' || inputs.action == 'destroy') && 
          inputs.auto_approve == false
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "🚨 Manual approval required for Terraform ${{ inputs.action }}"
          issue-body: |
            ## ⚠️ Terraform ${{ inputs.action }} requires manual approval

            **Action**: `${{ inputs.action }}`
            **Triggered by**: @${{ github.actor }}

            ### Plan Summary
            Please review the Terraform plan above before approving.

            **To approve**: Comment `approved`, `approve`, `lgtm`, or `yes`
            **To deny**: Comment `denied`, `deny`, `no`, or close this issue

            ⏱️ **Timeout**: This approval will timeout in 30 minutes
          exclude-workflow-initiator-as-approver: false

      - name: "Terraform Apply"
        id: apply
        if: |
          inputs.action == 'apply' && 
          steps.plan.outcome == 'success'
        run: |
          echo "🚀 Applying Terraform infrastructure changes..."
          echo "This will create/update AWS resources:"
          echo "  - EC2 Instance (DefectDojo server)"
          echo "  - RDS PostgreSQL Database"
          echo "  - Security Groups (EC2 + RDS)"
          echo "  - IAM Roles and Policies"
          echo ""

          terraform apply -auto-approve -input=false tfplan

          echo "✅ Infrastructure deployment completed successfully!"
        continue-on-error: false

      - name: "Terraform Destroy"
        id: destroy
        if: |
          inputs.action == 'destroy' && 
          steps.plan.outcome == 'success'
        run: |
          terraform apply -auto-approve -input=false tfplan
        continue-on-error: false

      - name: "Get Terraform Outputs"
        id: terraform_outputs
        if: inputs.action == 'apply' && steps.apply.outcome == 'success'
        run: |
          echo "📋 Collecting Terraform outputs for downstream workflows..."

          # Export all terraform outputs as JSON
          terraform output -json > terraform_outputs.json
          echo "terraform_outputs=$(cat terraform_outputs.json | jq -c .)" >> $GITHUB_OUTPUT

          # Export specific outputs for the app-deploy workflow
          EC2_INSTANCE_ID=$(terraform output -raw instance_id)
          EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)

          echo "ec2_instance_id=$EC2_INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "ec2_public_ip=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

          echo "✅ Outputs exported successfully:"
          echo "  - EC2 Instance: $EC2_INSTANCE_ID"
          echo "  - Public IP: $EC2_PUBLIC_IP"
          echo "  - RDS Endpoint: $RDS_ENDPOINT"

      - name: "Infrastructure Health Check"
        id: health_check
        if: inputs.action == 'apply' && steps.apply.outcome == 'success'
        run: |
          echo "🏥 Performing infrastructure health checks..."

          EC2_INSTANCE_ID=$(terraform output -raw instance_id)
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)

          # Check EC2 instance status
          echo "Checking EC2 instance status..."
          INSTANCE_STATE=$(aws ec2 describe-instances \
            --instance-ids "$EC2_INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)

          echo "EC2 Instance State: $INSTANCE_STATE"

          # Check RDS status
          echo "Checking RDS instance status..."
          DB_IDENTIFIER=$(echo "$RDS_ENDPOINT" | cut -d'.' -f1)
          RDS_STATUS=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_IDENTIFIER" \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text 2>/dev/null || echo "unknown")

          echo "RDS Instance Status: $RDS_STATUS"

          # Summary
          if [ "$INSTANCE_STATE" = "running" ] && [ "$RDS_STATUS" = "available" ]; then
            echo "✅ Infrastructure health check passed!"
            echo "infrastructure_ready=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Infrastructure not fully ready yet"
            echo "infrastructure_ready=false" >> $GITHUB_OUTPUT
          fi

      - name: "Terraform Output"
        id: output
        if: inputs.action == 'apply' && steps.apply.outcome == 'success'
        run: |
          echo "## 🚀 DefectDojo Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Terraform Outputs:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get instance information for DefectDojo access
          INSTANCE_IP=$(terraform output -raw instance_public_ip 2>/dev/null || echo "")
          INSTANCE_ID=$(terraform output -raw instance_id 2>/dev/null || echo "")

          if [ -n "$INSTANCE_IP" ]; then
            echo "### 🎯 DefectDojo Access Information:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- DefectDojo: http://$INSTANCE_IP:8080/" >> $GITHUB_STEP_SUMMARY
            echo "- Alternative: http://$INSTANCE_IP/" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Default Login:**" >> $GITHUB_STEP_SUMMARY
            echo "- Username: \`admin\`" >> $GITHUB_STEP_SUMMARY
            echo "- Password: \`DefectDojoMVP2024!\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**SSH Access:**" >> $GITHUB_STEP_SUMMARY
            echo "\`ssh -i ~/.ssh/sec-llm-infra-defectdojo-key.pem ubuntu@$INSTANCE_IP\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⏱️ Installation Status:" >> $GITHUB_STEP_SUMMARY
            echo "DefectDojo installation takes 5-10 minutes after infrastructure deployment." >> $GITHUB_STEP_SUMMARY
            echo "Monitor installation progress:" >> $GITHUB_STEP_SUMMARY
            echo "\`ssh ubuntu@$INSTANCE_IP 'tail -f /var/log/defectdojo-install.log'\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Troubleshooting:" >> $GITHUB_STEP_SUMMARY
            echo "- Check containers: \`ssh ubuntu@$INSTANCE_IP 'cd /opt/defectdojo && docker-compose ps'\`" >> $GITHUB_STEP_SUMMARY
            echo "- Check logs: \`ssh ubuntu@$INSTANCE_IP 'cd /opt/defectdojo && docker-compose logs'\`" >> $GITHUB_STEP_SUMMARY
            echo "- Restart DefectDojo: \`ssh ubuntu@$INSTANCE_IP 'cd /opt/defectdojo && sudo docker-compose restart'\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: "Upload Terraform Plan Artifact"
        uses: actions/upload-artifact@v4
        if: steps.plan.outcome == 'success'
        with:
          name: terraform-plan-${{ github.run_number }}
          path: |
            terraform/tfplan
            terraform/.terraform.lock.hcl
          retention-days: 30

      - name: "Clean up on failure"
        if: failure()
        run: |
          echo "🚨 Workflow failed. Cleaning up..."
          rm -f tfplan
          echo "::error::Terraform ${{ inputs.action }} failed. Check the logs above."

      - name: "Success Notification"
        if: success()
        run: |
          echo "✅ Terraform ${{ inputs.action }} completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resources Created/Updated**: Check outputs above" >> $GITHUB_STEP_SUMMARY
